{
	"info": {
		"_postman_id": "ec8dad27-2765-444b-925a-01a745a27ee6",
		"name": "Assignment2_tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Formal Unit Tests - Correct Flow",
			"item": [
				{
					"name": "Register New User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"name\", \"testabc@fake.email\")",
									"pm.collectionVariables.set(\"password\", \"test12345\")"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()",
									"",
									"pm.test(\"Response is OK\", () => {",
									"    pm.response.to.have.status(201)",
									"})",
									"",
									"pm.test(\"Body to have success\", () => {",
									"    pm.expect(response).to.have.ownProperty(\"success\")",
									"    pm.expect(response.success).to.equal(true) ",
									"})",
									"",
									"pm.test(\"Body to have email\", () => {",
									"    pm.expect(response).to.have.ownProperty(\"email\")",
									"    pm.expect(response.email).to.equal(pm.collectionVariables.replaceIn(\"{{name}}\"))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\":\"{{name}}\",\n    \"password\":\"{{password}}\",\n    \"username\":\"testabc\",\n    \"phone\":\"1234567890\"\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign-in New User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()",
									"",
									"pm.test(\"Response is OK\", () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test(\"Body to have success\", () => {",
									"    pm.expect(response).to.have.ownProperty(\"success\")",
									"    pm.expect(response.success).to.equal(true) ",
									"})",
									"",
									"pm.test(\"Body to have message\", () => {",
									"    pm.expect(response).to.have.ownProperty(\"message\")",
									"    pm.expect(response.message).to.equal(\"Authentication successful!\")",
									"})",
									"",
									"pm.test(\"Body to have token\", () => {",
									"    pm.expect(response).to.have.ownProperty(\"token\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{name}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register New Order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()\r",
									"\r",
									"pm.test(\"Response is OK\", () => {\r",
									"    pm.response.to.have.status(201)\r",
									"})\r",
									"\r",
									"pm.test(\"Body to have success\", () => {\r",
									"    pm.expect(response).to.have.ownProperty(\"success\")\r",
									"    pm.expect(response.success).to.equal(true) \r",
									"})\r",
									"\r",
									"pm.test(\"Body to have success\", () => {\r",
									"    pm.expect(response).to.have.ownProperty(\"body\")\r",
									"    console.log(JSON.stringify(response.body))\r",
									"})\r",
									"\r",
									"pm.test(\"Body to have message\", () => {\r",
									"    pm.expect(response).to.have.ownProperty(\"message\")\r",
									"    pm.expect(response.message).to.equal(\"Order added\") \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"orderhistoryorders\":\"{\\\"bool\\\":[\\\"f\\\", \\\"t\\\", \\\"f\\\", \\\"t\\\", \\\"f\\\", \\\"f\\\", \\\"t\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"t\\\", \\\"t\\\"]}\",\n    \"name\":\"Test Special\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/order",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve New Order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()\r",
									"\r",
									"pm.test(\"Body to have order\", () => {\r",
									"    pm.expect(response).to.have.ownProperty(\"orders\")\r",
									"})\r",
									"\r",
									"var orderJSON = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"orderid\",orderJSON.orders[0].orderid)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/order",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove New Order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()\r",
									"\r",
									"pm.test(\"Body to have success\", () => {\r",
									"    pm.expect(response).to.have.ownProperty(\"success\")\r",
									"    pm.expect(response.success).to.equal(true)\r",
									"})\r",
									"\r",
									"var testid = pm.environment.get(\"orderid\");\r",
									"\r",
									"pm.test(\"Body to have message\", () => {\r",
									"    pm.expect(response).to.have.ownProperty(\"message\")\r",
									"    pm.expect(response.message).to.equal(pm.collectionVariables.replaceIn(\"Deleted: \" + testid))\r",
									"})\r",
									"\r",
									"pm.test(\"Response is OK\", () => {\r",
									"    pm.response.to.have.status(200)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/order/{{orderid}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"order",
								"{{orderid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign-out User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auth",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign-in Retrieve JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()",
									"pm.collectionVariables.set(\"jwt\", response.token)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{name}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Formal Unit Tests - POST Incorrect Flows",
			"item": [
				{
					"name": "Register New User (Missing email)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"name\", \"testabc@fake.email\")",
									"pm.collectionVariables.set(\"password\", \"test12345\")"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()",
									"",
									"pm.test(\"Response is ERROR\", () => {",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"pm.test(\"Body to have message\", () => {",
									"    pm.expect(response).to.have.ownProperty(\"message\")",
									"    pm.expect(response.message).to.equal(\"Missing required information\") ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first\":\"test\",\n    \"last\":\"abc\",\n    \"password\":\"{{password}}\",\n    \"username\":\"testabc\"\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register New User (Missing password)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"name\", \"testabc@fake.email\")",
									"pm.collectionVariables.set(\"password\", \"test12345\")"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()",
									"",
									"pm.test(\"Response is ERROR\", () => {",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"pm.test(\"Body to have message\", () => {",
									"    pm.expect(response).to.have.ownProperty(\"message\")",
									"    pm.expect(response.message).to.equal(\"Missing required information\") ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first\":\"test\",\n    \"last\":\"abc\",\n    \"email\":\"{{name}}\",\n    \"username\":\"testabc\"\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register New User (Missing username)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"name\", \"testabc@fake.email\")",
									"pm.collectionVariables.set(\"password\", \"test12345\")"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()",
									"",
									"pm.test(\"Response is ERROR\", () => {",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"pm.test(\"Body to have message\", () => {",
									"    pm.expect(response).to.have.ownProperty(\"message\")",
									"    pm.expect(response.message).to.equal(\"Missing required information\") ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\":\"{{name}}\",\n    \"password\":\"{{password}}\",\n    \"phone\":\"1234567890\"\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register New User (Missing phone)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"name\", \"testabc@fake.email\")",
									"pm.collectionVariables.set(\"password\", \"test12345\")"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()",
									"",
									"pm.test(\"Response is ERROR\", () => {",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"pm.test(\"Body to have message\", () => {",
									"    pm.expect(response).to.have.ownProperty(\"message\")",
									"    pm.expect(response.message).to.equal(\"Missing required information\") ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\":\"{{name}}\",\n    \"password\":\"{{password}}\",\n    \"username\":\"testabc\"\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register New User (Invalid email)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"name\", \"testabc@fake.email\")",
									"pm.collectionVariables.set(\"password\", \"test12345\")"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()",
									"",
									"pm.test(\"Response is ERROR\", () => {",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"pm.test(\"Body to have message\", () => {",
									"    pm.expect(response).to.have.ownProperty(\"message\")",
									"    pm.expect(response.message).to.equal(\"Invalid parameters\") ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\":\"test123gmail.com\",\n    \"password\":\"{{password}}\",\n    \"username\":\"testabc\",\n    \"phone\":\"1234567890\"\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register New User (Invalid password)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"name\", \"testabc@fake.email\")",
									"pm.collectionVariables.set(\"password\", \"test12345\")"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()",
									"",
									"pm.test(\"Response is ERROR\", () => {",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"pm.test(\"Body to have message\", () => {",
									"    pm.expect(response).to.have.ownProperty(\"message\")",
									"    pm.expect(response.message).to.equal(\"Invalid parameters\") ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\":\"test123@gmail.com\",\n    \"password\":\"ab\",\n    \"username\":\"testabc\",\n    \"phone\":\"1234567890\"\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register New User (Invalid username)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"name\", \"testabc@fake.email\")",
									"pm.collectionVariables.set(\"password\", \"test12345\")"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()",
									"",
									"pm.test(\"Response is ERROR\", () => {",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"pm.test(\"Body to have message\", () => {",
									"    pm.expect(response).to.have.ownProperty(\"message\")",
									"    pm.expect(response.message).to.equal(\"Invalid parameters\") ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\":\"test123@gmail.com\",\n    \"password\":\"abcd12\",\n    \"username\":\"thisusernameistoolonggggg\",\n    \"phone\":\"1234567890\"\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register New User (Invalid phone)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"name\", \"testabc@fake.email\")",
									"pm.collectionVariables.set(\"password\", \"test12345\")"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()",
									"",
									"pm.test(\"Response is ERROR\", () => {",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"pm.test(\"Body to have message\", () => {",
									"    pm.expect(response).to.have.ownProperty(\"message\")",
									"    pm.expect(response.message).to.equal(\"Invalid parameters\") ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\":\"test123@gmail.com\",\n    \"password\":\"abcd12\",\n    \"username\":\"testabc\",\n    \"phone\":\"onetwothree\"\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register New User (Email already exists)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"name\", \"testabc@fake.email\")",
									"pm.collectionVariables.set(\"password\", \"test12345\")"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()",
									"",
									"pm.test(\"Response is ERROR\", () => {",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"pm.test(\"Body to have message\", () => {",
									"    pm.expect(response).to.have.ownProperty(\"message\")",
									"    pm.expect(response.message).to.equal(\"Email exists\") ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\":\"{{name}}\",\n    \"password\":\"{{password}}\",\n    \"username\":\"testabc1\",\n    \"phone\":\"1234567890\"\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Insert Into Order 400 Missing Parameters - orderhistoryorders",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()\r",
									"\r",
									"pm.test(\"Body to have message\", () => {\r",
									"    pm.expect(response).to.have.ownProperty(\"message\")\r",
									"    pm.expect(response.message).to.equal(\"Missing required information\")\r",
									"})\r",
									"\r",
									"pm.test(\"Response is ERROR\", () => {\r",
									"    pm.response.to.have.status(400)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"Test Special\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/order",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "Insert Into Order 400 Invalid Parameters - orderhistoryorders",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()\r",
									"\r",
									"pm.test(\"Body to have message\", () => {\r",
									"    pm.expect(response).to.have.ownProperty(\"message\")\r",
									"    pm.expect(response.message).to.equal(\"Invalid parameters\")\r",
									"})\r",
									"\r",
									"pm.test(\"Response is ERROR\", () => {\r",
									"    pm.response.to.have.status(400)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"orderhistoryorders\":\"{\\\"bool\\\":[\\\"f\\\", \\\"t\\\", \\\"f\\\", \\\"t\\\", \\\"f\\\", \\\"f\\\", \\\"t\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"t\\\", \\\"g\\\"]}\",\n    \"name\":\"Test Special\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/order",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "Insert Into Order 400 Malformed JSON",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()\r",
									"\r",
									"pm.test(\"Response is OK\", () => {\r",
									"    pm.response.to.have.status(400)\r",
									"})\r",
									"\r",
									"pm.test(\"Body to have message\", () => {\r",
									"    pm.expect(response).to.have.ownProperty(\"message\")\r",
									"    pm.expect(response.message).to.equal(\"malformed JSON in parameters\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"memberid\":\"3\",\n    \"orderhistoryorders\":\"{\\\"bool\\\":[\\\"f\\\", \\\"t\\\", \\\"f\\\", \\\"t\\\", \\\"f\\\", \\\"f\\\", \\\"t\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"t\\\", \\\"t\\\"]}\"\n    \"name\":\"Test Special\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/order",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "Insert Into Order 403 Invalid Token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()\r",
									"\r",
									"pm.test(\"Response is OK\", () => {\r",
									"    pm.response.to.have.status(403)\r",
									"})\r",
									"\r",
									"pm.test(\"Body to have message\", () => {\r",
									"    pm.expect(response).to.have.ownProperty(\"message\")\r",
									"    pm.expect(response.message).to.equal(\"Token is not valid\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"memberid\":\"3\",\n    \"orderhistoryorders\":\"{\\\"bool\\\":[\\\"f\\\", \\\"t\\\", \\\"f\\\", \\\"t\\\", \\\"f\\\", \\\"f\\\", \\\"t\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"t\\\", \\\"t\\\"]}\",\n    \"name\":\"Test Special\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/order",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "Insert Into Order 401 Auth Token Not Supplied",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()\r",
									"\r",
									"pm.test(\"Response is OK\", () => {\r",
									"    pm.response.to.have.status(401)\r",
									"})\r",
									"\r",
									"pm.test(\"Body to have message\", () => {\r",
									"    pm.expect(response).to.have.ownProperty(\"message\")\r",
									"    pm.expect(response.message).to.equal(\"Auth token is not supplied\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"memberid\":\"3\",\n    \"orderhistoryorders\":\"{\\\"bool\\\":[\\\"f\\\", \\\"t\\\", \\\"f\\\", \\\"t\\\", \\\"f\\\", \\\"f\\\", \\\"t\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"f\\\", \\\"t\\\", \\\"t\\\"]}\",\n    \"name\":\"Test Special\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/order",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"order"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Formal Unit Tests - GET Incorrect Flows",
			"item": [
				{
					"name": "Signin User (Missing authorization header))",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()\r",
									"\r",
									"pm.test(\"Response is OK\", () => {\r",
									"    pm.response.to.have.status(400)\r",
									"})\r",
									"\r",
									"pm.test(\"Body to have message\", () => {\r",
									"    pm.expect(response).to.have.ownProperty(\"message\")\r",
									"    pm.expect(response.message).to.equal(\"Missing Authorization Header\") \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auth",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Signin User (Malformed authorization header)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()\r",
									"\r",
									"pm.test(\"Response is OK\", () => {\r",
									"    pm.response.to.have.status(400)\r",
									"})\r",
									"\r",
									"pm.test(\"Body to have message\", () => {\r",
									"    pm.expect(response).to.have.ownProperty(\"message\")\r",
									"    pm.expect(response.message).to.equal(\"Malformed Authorization Header\") \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic asdf:fdsa",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/auth",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Signin User (User not found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()\r",
									"\r",
									"pm.test(\"Response is OK\", () => {\r",
									"    pm.response.to.have.status(404)\r",
									"})\r",
									"\r",
									"pm.test(\"Body to have message\", () => {\r",
									"    pm.expect(response).to.have.ownProperty(\"message\")\r",
									"    pm.expect(response.message).to.equal(\"User not found\") \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "idontexist",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auth",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Signin User (Wrong password)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()\r",
									"\r",
									"pm.test(\"Response is OK\", () => {\r",
									"    pm.response.to.have.status(400)\r",
									"})\r",
									"\r",
									"pm.test(\"Body to have message\", () => {\r",
									"    pm.expect(response).to.have.ownProperty(\"message\")\r",
									"    pm.expect(response.message).to.equal(\"Credentials did not match\") \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "wrongpass",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{name}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auth",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get From Order 404 No Orders Found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()\r",
									"\r",
									"pm.test(\"Body to have message\", () => {\r",
									"    pm.expect(response).to.have.ownProperty(\"message\")\r",
									"    pm.expect(response.message).to.equal(\"No Orders\")\r",
									"})\r",
									"\r",
									"pm.test(\"Response is ERROR\", () => {\r",
									"    pm.response.to.have.status(404)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/order",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get From Order 403 Invalid Token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()\r",
									"\r",
									"pm.test(\"Response is OK\", () => {\r",
									"    pm.response.to.have.status(403)\r",
									"})\r",
									"\r",
									"pm.test(\"Body to have message\", () => {\r",
									"    pm.expect(response).to.have.ownProperty(\"message\")\r",
									"    pm.expect(response.message).to.equal(\"Token is not valid\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/order",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get From Order 401 Auth Token Not Supplied",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()\r",
									"\r",
									"pm.test(\"Response is OK\", () => {\r",
									"    pm.response.to.have.status(401)\r",
									"})\r",
									"\r",
									"pm.test(\"Body to have message\", () => {\r",
									"    pm.expect(response).to.have.ownProperty(\"message\")\r",
									"    pm.expect(response.message).to.equal(\"Auth token is not supplied\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/order",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"order"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Formal Unit Tests - DELETE Incorrect Flow",
			"item": [
				{
					"name": "Delete From Order 404 Name not found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()\r",
									"\r",
									"pm.test(\"Body to have message\", () => {\r",
									"    pm.expect(response).to.have.ownProperty(\"message\")\r",
									"    pm.expect(response.message).to.equal(\"Name not found\")\r",
									"})\r",
									"\r",
									"pm.test(\"Response is ERROR\", () => {\r",
									"    pm.response.to.have.status(404)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/order/-1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"order",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete From Order 400 Missing Parameters - orderid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()\r",
									"\r",
									"pm.test(\"Body to have message\", () => {\r",
									"    pm.expect(response).to.have.ownProperty(\"message\")\r",
									"    pm.expect(response.message).to.equal(\"Missing required information\")\r",
									"})\r",
									"\r",
									"pm.test(\"Response is ERROR\", () => {\r",
									"    pm.response.to.have.status(400)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/order/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"order",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete From Order 403 Invalid Token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()\r",
									"\r",
									"pm.test(\"Response is OK\", () => {\r",
									"    pm.response.to.have.status(403)\r",
									"})\r",
									"\r",
									"pm.test(\"Body to have message\", () => {\r",
									"    pm.expect(response).to.have.ownProperty(\"message\")\r",
									"    pm.expect(response.message).to.equal(\"Token is not valid\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/order/{{orderid}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"order",
								"{{orderid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete From Order 401 Auth Token Not Supplied",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()\r",
									"\r",
									"pm.test(\"Response is OK\", () => {\r",
									"    pm.response.to.have.status(401)\r",
									"})\r",
									"\r",
									"pm.test(\"Body to have message\", () => {\r",
									"    pm.expect(response).to.have.ownProperty(\"message\")\r",
									"    pm.expect(response.message).to.equal(\"Auth token is not supplied\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/order/{{orderid}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"order",
								"{{orderid}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Example Retrive JWT",
			"item": [
				{
					"name": "Sign-in Retrieve JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()",
									"pm.collectionVariables.set(\"jwt\", response.token)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{name}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Use JWT",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/orders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "password",
			"value": ""
		},
		{
			"key": "jwt",
			"value": ""
		},
		{
			"key": "testOrdersList",
			"value": ""
		}
	]
}